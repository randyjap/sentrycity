<style>
  /* Always set the map height explicitly to define the size of the div
    * element that contains the map. */
  #map {
    height: 300px;
    width: 100%;
  }
  /* Optional: Makes the sample page fill the window. */

  #infowindow-content .title {
    font-weight: bold;
  }

  #infowindow-content {
    display: none;
  }

  #map #infowindow-content {
    display: inline;
  }

  #pac-container {
    padding-bottom: 12px;
    margin-right: 12px;
  }

  #pac-input {
    background-color: #fff;
    font-size: 15px;
    font-weight: 300;
    margin-left: 12px;
    padding: 0 11px 0 13px;
    text-overflow: ellipsis;
    width: 400px;
  }

  #pac-input:focus {
    border-color: #4d90fe;
  }
</style>

<div style="height: 8px; top: 71px;" class="progress rounded-0">
  <div role="progressbar" style="width: 20%" aria-valuenow="20" aria-valuemin="0" aria-valuemax="100" class="progress-bar"></div>
</div>
<section class="py-5">
  <div class="container">
    <p class="subtitle text-primary"><%= t('.add_new_listing') %></p>
    <h1 class="h2 mb-5"> <%= t('.basic_info') %> <span class="text-muted float-right"><%= t('.step_1') %></span></h1>
    <form action="/create-a-store" method="post" id="create-a-store-form">
      <input type="hidden" name="authenticity_token" value="token_value">
      <input name="_method" type="hidden" value="put" />
      <div class="row form-block">
        <div class="col-lg-4">
          <h4><%= t('.basic') %></h4>
          <p class="text-muted text-sm">His room, a proper human room although a little too small, lay peacefully between its four familiar walls. A collection of textile samples lay spread out on the table.</p>
        </div>
        <div class="col-lg-7 ml-auto">
          <div class="form-group">
            <label class="form-label"><%= t('.grand_opening_or_farewell_sale') %></label>
            <div class="custom-control custom-radio">
              <input value="Farewell Sale" <%= store.event_type && store.event_type == "Farewell Sale" ? "checked" : "" %> <%= store.event_type.nil? ? "checked" : "" %> type="radio" id="event-type-farewell-sale" name="store_params[event_type]" class="custom-control-input">
              <label for="event-type-farewell-sale" class="custom-control-label"><%= t('.farewell_sale') %></label>
            </div>
            <div class="custom-control custom-radio">
              <input value="Grand Opening" <%= store.event_type && store.event_type == "Grand Opening" ? "checked" : "" %> type="radio" id="event-type-grand-opening" name="store_params[event_type]" class="custom-control-input">
              <label for="event-type-grand-opening" class="custom-control-label"><%= t('.grand_opening') %></label>
            </div>
          </div>
          <div class="form-group">
            <label for="store-name" class="form-label"><%= t('.store_name') %></label>
            <input name="store_params[name]" id="store-name" class="form-control" value="<%= store.name %>">
          </div>
          <div class="form-group">
            <label for="event-date" class="form-label"><%= t('.date_of_event') %></label>
            <input value="<%= store.event_date && store.event_date.strftime("%Y-%m-%d") %>" type="date" name="store_params[event_date]" id="event-date" class="form-control col-lg-4">
          </div>
        </div>
      </div>
      <div class="row form-block">
        <div class="col-lg-4">
          <h4><%= t('.location') %></h4>
          <p class="text-muted text-sm">Samsa was a travelling salesman - and above it there hung a picture that he had recently cut out of an illustrated magazine and housed in a nice, gilded frame.</p>
        </div>
        <div class="col-lg-7 ml-auto">
          <!-- District-->
          <div class="form-group">
            <label for="district" class="form-label"><%= t('.district') %></label></br>
            <select name="store_params[district_id]" id="district" data-style="btn-selectpicker" title=" " data-live-search="true" class="selectpicker form-control col-lg-4">
              <% District.all.each do |district| %>
                <option <%= store.district_id == district.id ? "selected" : "" %> value="<%= district.id %>"><%= t("app-settings.districts.#{district.name}") %></option>
              <% end %>
            </select>
          </div>
          <!-- Address-->
          <div class="form-group">
            <label for="address" class="form-label"><%= t('.address') %></label>
            <input style="margin: 0;" value="<%= store.address %>" name="store_params[address]" id="pac-input" class="form-control" type="text">
            <input type="hidden" id="lat" name="store_params[lat]" value="<%= store.lat %>">
            <input type="hidden" id="lng" name="store_params[lng]" value="<%= store.lng %>">
          </div>
        </div>
      </div>
      <!-- Map -->
      <div id="map"></div>
      <div id="infowindow-content">
        <img src="" width="16" height="16" id="place-icon">
        <span id="place-name"  class="title"></span><br>
        <span id="place-address"></span>
      </div>
      <div class="row form-block flex-column flex-sm-row">
        <div class="col text-center text-sm-left"></div>
        <div class="col text-center text-sm-right"><button name="next_form_no" value="2" class="btn btn-primary px-3"><%= t('.next_step') %><i class="fa-chevron-right fa ml-2"></i></button></div>
      </div>
    </form>
  </div>
</section>

<script>
  // This example requires the Places library. Include the libraries=places
  // parameter when you first load the API. For example:
  // <script src="https://maps.googleapis.com/maps/api/js?key=YOURKEY&libraries=places">

  function initMap() {
    var map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: <%= store.lat || 22.277162 %>, lng: <%= store.lng || 114.1712311 %>},
      zoom: 16,
      disableDefaultUI: true,
      gestureHandling: 'none',
      zoomControl: false
    });
    var input = document.getElementById('pac-input');
    var autocomplete = new google.maps.places.Autocomplete(input);

    // Bind the map's bounds (viewport) property to the autocomplete object,
    // so that the autocomplete requests use the current map bounds for the
    // bounds option in the request.
    autocomplete.bindTo('bounds', map);

    // Set the data fields to return when the user selects a place.
    autocomplete.setFields(
        ['address_components', 'geometry', 'icon', 'name']);

    var infowindow = new google.maps.InfoWindow();
    var infowindowContent = document.getElementById('infowindow-content');
    infowindow.setContent(infowindowContent);
    var marker = new google.maps.Marker({
      map: map,
      anchorPoint: new google.maps.Point(0, -29)
    });


    if (input.value !== '') {
      var request = {
        query: input.value,
        fields: ['geometry', 'icon', 'name']
      };

      var service = new google.maps.places.PlacesService(map);

      service.findPlaceFromQuery(request, function(results, status) {
        var place = results[0];
        if (!place.geometry) {
          // User entered the name of a Place that was not suggested and
          // pressed the Enter key, or the Place Details request failed.
          window.alert("No details available for input: '" + place.name + "'");
          return;
        }

        // If the place has a geometry, then present it on a map.
        if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
        } else {
          map.setCenter(place.geometry.location);
          map.setZoom(17);  // Why 17? Because it looks good.
        }
        marker.setPosition(place.geometry.location);
        marker.setVisible(true);

        infowindowContent.children['place-icon'].src = place.icon;
        infowindowContent.children['place-name'].textContent = place.name;
        infowindowContent.children['place-address'].textContent = input.value;
        infowindow.open(map, marker);
      });
    }

    google.maps.event.trigger(autocomplete, 'place_changed')

    autocomplete.addListener('place_changed', function() {
      infowindow.close();
      marker.setVisible(false);
      var place = autocomplete.getPlace();
      console.log(place)
      $('input[name="store_params[lat]"').val(place.geometry.location.lat());
      $('input[name="store_params[lng]"').val(place.geometry.location.lng());
      if (!place.geometry) {
        // User entered the name of a Place that was not suggested and
        // pressed the Enter key, or the Place Details request failed.
        window.alert("No details available for input: '" + place.name + "'");
        return;
      }

      // If the place has a geometry, then present it on a map.
      if (place.geometry.viewport) {
        map.fitBounds(place.geometry.viewport);
      } else {
        map.setCenter(place.geometry.location);
        map.setZoom(17);  // Why 17? Because it looks good.
      }
      marker.setPosition(place.geometry.location);
      marker.setVisible(true);

      var address = '';
      if (place.address_components) {
        address = [
          (place.address_components[0] && place.address_components[0].short_name || ''),
          (place.address_components[1] && place.address_components[1].short_name || ''),
          (place.address_components[2] && place.address_components[2].short_name || '')
        ].join(' ');
      }

      infowindowContent.children['place-icon'].src = place.icon;
      infowindowContent.children['place-name'].textContent = place.name;
      infowindowContent.children['place-address'].textContent = address;
      infowindow.open(map, marker);
    });
  }
</script>
<% if Rails.env == 'production' %>
  <script src="https://maps.googleapis.com/maps/api/js?key=<%= Rails.application.credentials.google[:key] %>&libraries=places&callback=initMap" async defer></script>
<% end %>